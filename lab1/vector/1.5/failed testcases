/*


void testContainsOneElem() {
	Vector<string> v = { "foo"};
	TS_ASSERT_EQUALS(true, v.exists("foo"));
	TS_ASSERT_EQUALS(false, v.exists("bar"));
}



void testContainsTwoElems() {
	Vector<string> v = { "foo", "bar"};
	TS_ASSERT_EQUALS(true, v.exists("foo"));
	TS_ASSERT_EQUALS(true, v.exists("bar"));
	TS_ASSERT_EQUALS(false, v.exists("baz"));
}

void testContainsTwoElemsWithErase() {
	Vector<string> v = { "foo", "bar"};
	TS_ASSERT_EQUALS(true, v.exists("foo"));
	TS_ASSERT_EQUALS(true, v.exists("bar"));
	TS_ASSERT_EQUALS(false, v.exists("baz"));
	v.erase(1);
	TS_ASSERT_EQUALS(false, v.exists("bar"));
}

void testInsertWithClasses() {
	Vector<Foo> v(2);
	Foo f;
	v.insert(0, f);
	f.x = 5;
	TS_ASSERT_DIFFERS(v[0].x, f.x);
}

void testInsertWithStandardVector() {
	std::vector<Foo> v(2);
	Foo f;
	v[0] = f;
	f.x = 5;
	TS_ASSERT_DIFFERS(v[0].x, f.x);
}

void testStdMoveingObjects() {
	Vector<Foo> v(10);
	v[2].x = -1;
	Vector<Foo> expected = v;
	Vector<Foo> v2 = std::move(v);
	Vector<Foo> v3;
	TS_ASSERT_EQUALS(10, v2.size());
	TS_ASSERT_EQUALS(0, v.size());
	v3 = std::move(v2);
	TS_ASSERT_EQUALS(10, v3.size());
	TS_ASSERT_EQUALS(0, v2.size());

	assertVectorsEqual(v3, expected);
	TS_ASSERT_EQUALS(v3[2].x, -1);
}

void testErasingObjects() {
	Vector<Foo> objects(3);
	Vector<Foo> expected(2);
	objects[1].x = -1;
	objects.erase(1);

	assertVectorsEqual(expected, objects);
}

void testDefaultVal() {
	Vector<std::string> strs(2), expected = {"", ""};
	assertVectorsEqual(strs, expected);

	Vector<int> ints(100);
	for (int i = 0; i < 100; ++i) {
		TS_ASSERT_EQUALS(0, ints[i]);
	}
}

void TestFirstPart() {
	Vector<int> v(1);
	TS_ASSERT_EQUALS(v[0], 0);
	TS_ASSERT_EQUALS(v.size(), 1);
}

*/






















*/
